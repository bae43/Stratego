package client;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Polygon;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.MouseMotionAdapter;

import javax.swing.JPanel;

public class Board extends JPanel {

	private static final long serialVersionUID = 1L;

	int[] hovered = new int[2];
	int[] selected = new int[2];

	private static final int SQUARE_DIMS = StrategoClient.SPACE_SIZE
			+ StrategoClient.SQUARE_SIZE;

	public Board() {

		setBackground(new Color(0, .3f, .6f));
		setListeners();
		repaint();
		setVisible(true);
	}

	public void paintComponent(Graphics g) {
		super.paintComponent(g);

		for (int i = 0; i < 10; i++) {
			for (int j = 0; j < 10; j++) {

				drawSquare(g, Color.black, i, j);

			}
		}

		// highlights hovered square

		System.out.println(selected[0] + " " + selected[1]);
		drawSquare(g, new Color(.3f, .7f, .1f), hovered[0], hovered[1]);

		if (!selected.equals(new int[] { -1, -1 })) {
			drawSquare(g, new Color(1f, 1f, 1f), selected[0], selected[1]);
		}

	}

	private void drawSquare(Graphics g, Color c, int x, int y) {

		g.setColor(c);

		Polygon sq = new Polygon();
		for (int k = 0; k < 4; k++) {
			int xPoint = StrategoClient.BORDER_SIZE
					+ (int) (StrategoClient.SQUARE_SIZE / 2 + x * (SQUARE_DIMS) + StrategoClient.SQUARE_SIZE
							/ Math.sqrt(2)
							* Math.cos((k * 2 + 1) * Math.PI / 4));
			int yPoint = StrategoClient.BORDER_SIZE
					+ (int) (StrategoClient.SQUARE_SIZE / 2 + y * (SQUARE_DIMS) + StrategoClient.SQUARE_SIZE
							/ Math.sqrt(2)
							* Math.sin((k * 2 + 1) * Math.PI / 4));

			sq.addPoint(xPoint, yPoint);
		}

		g.fillPolygon(sq);

	}

	private void setListeners() {

		addMouseMotionListener(new MouseMotionAdapter() {
			public void mouseMoved(MouseEvent e) {

				int xLoc = e.getX();
				int yLoc = e.getY();

				hovered = new int[] {
						(int) ((xLoc - StrategoClient.BORDER_SIZE) / SQUARE_DIMS),
						(int) ((yLoc - StrategoClient.BORDER_SIZE) / SQUARE_DIMS) };

				repaint();

			}
		});

		addMouseListener(new MouseAdapter() {
			public void mousePressed(MouseEvent e) {

				if (hovered.equals(selected)) {
					selected = new int[] { -1, -1 };
				} else {
					selected = hovered;
				}

				repaint();

			}
		});

	}

}
