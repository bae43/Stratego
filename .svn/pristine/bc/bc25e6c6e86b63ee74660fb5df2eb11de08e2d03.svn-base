package client;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.Image;
import java.awt.Polygon;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.MouseMotionAdapter;
import java.io.File;
import java.io.IOException;

import javax.imageio.ImageIO;
import javax.swing.JPanel;

public class Board extends JPanel {

	private static final long serialVersionUID = 1L;

	Image bg = null;
	Image[] pieceImgs = new Image[12];
	int[][] board = new int[10][10];

	int[] hovered = new int[2];
	int[] selected = new int[] { -1, -1 };

	private static final int SQUARE_DIMS = StrategoClient.SPACE_SIZE
			+ StrategoClient.SQUARE_SIZE;

	public Board() {

		// XXX TEST
		board[1][1] = 2;
		board[2][2] = 2;
		board[8][9] = 2;

		setBackground(Color.black);

		try {

			bg = ImageIO.read(new File("rsc/board.png"));
			// for(int i = 0; i < 12; i++){}
			pieceImgs[2] = ImageIO.read(new File("rsc/2.png"));

		} catch (IOException e) {
			System.out.println("Error loading images");
			e.printStackTrace();

		}

		setListeners();
		repaint();
		setVisible(true);
	}

	public void paintComponent(Graphics g) {
		super.paintComponent(g);

		g.drawImage(bg, StrategoClient.BORDER_SIZE, StrategoClient.BORDER_SIZE,
				null);

		g.setColor(new Color(0, 0, 0, .1f));
		for (int i = 0; i < 10; i++) {
			for (int j = 0; j < 10; j++) {

				g.drawPolygon(square(i, j));
				drawPiece(g, i, j);

			}
		}
		Polygon sq;

		// highlights hovered square
		if (hovered[0] < 10 && hovered[1] < 10) {
			sq = square(hovered[0], hovered[1]);
			g.setColor(new Color(.3f, .3f, .7f, .4f));
			g.fillPolygon(sq);
		}

		if (selected[0] != -1) {

			sq = square(selected[0], selected[1]);
			g.setColor(new Color(1f, .5f, 0f, .4f));
			g.fillPolygon(sq);
			g.setColor(new Color(1f, 1f, 0f));
			g.drawPolygon(sq);
		}

	}

	private Polygon square(int x, int y) {

		Polygon sq = new Polygon();
		for (int k = 0; k < 4; k++) {
			int xPoint = StrategoClient.BORDER_SIZE
					+ (int) (StrategoClient.SQUARE_SIZE / 2 + x * (SQUARE_DIMS) + StrategoClient.SQUARE_SIZE
							/ Math.sqrt(2)
							* Math.cos((k * 2 + 1) * Math.PI / 4));
			int yPoint = StrategoClient.BORDER_SIZE
					+ (int) (StrategoClient.SQUARE_SIZE / 2 + y * (SQUARE_DIMS) + StrategoClient.SQUARE_SIZE
							/ Math.sqrt(2)
							* Math.sin((k * 2 + 1) * Math.PI / 4));

			sq.addPoint(xPoint, yPoint);
		}
		return sq;

	}

	private void drawPiece(Graphics g, int x, int y) {
		// System.out.println("drawing " + x + " " + y);
		try {
			// if (board[x][y] != 0) {
			// System.out.println(x + " " + y);
			// }
			g.drawImage(pieceImgs[board[x][y]], StrategoClient.BORDER_SIZE + x
					* SQUARE_DIMS,
					StrategoClient.BORDER_SIZE + y * SQUARE_DIMS, null);
		} catch (Exception e) {
			System.out.println("Error drawing piece at (" + x + "," + y + ")");
			e.printStackTrace();
		}
	}

	private void setListeners() {

		addMouseMotionListener(new MouseMotionAdapter() {
			public void mouseMoved(MouseEvent e) {

				int xLoc = e.getX();
				int yLoc = e.getY();

				hovered = new int[] {
						(int) ((xLoc - StrategoClient.BORDER_SIZE) / SQUARE_DIMS),
						(int) ((yLoc - StrategoClient.BORDER_SIZE) / SQUARE_DIMS) };

				repaint();

			}
		});

		addMouseListener(new MouseAdapter() {
			public void mousePressed(MouseEvent e) {

				// piece = board
				if (hovered.equals(selected)) {
					selected = new int[] { -1, -1 };
				} else {

					// moves piece from old to selected
					int[] old = selected.clone();
					selected = hovered;

					if (old[0] > -1) {
						int temp = board[old[0]][old[1]];
						board[old[0]][old[1]] = board[selected[0]][selected[1]];
						board[selected[0]][selected[1]] = temp;
						selected = new int[] { -1, -1 }; 
					}
				}

				repaint();

			}
		});

	}

}
